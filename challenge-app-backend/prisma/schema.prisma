generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                 String              @id @default(uuid()) @db.Uuid
  email              String              @unique
  name               String
  avatarUrl          String?
  googleId           String?             @unique
  language           String              @default("zh-TW")
  pixelAbodeState    Json                @default("{\"items\": [], \"scene\": \"default_room\", \"layout\": {}}")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  keepNotes          KeepNote[]
  levelMembers       LevelMember[]
  ownedLevels        Level[]             @relation("LevelOwner")
  playerAchievements PlayerAchievement[]

  @@map("players")
}

model Level {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  inviteCode   String        @unique @db.VarChar(8)
  ownerId      String        @db.Uuid
  isActive     Boolean       @default(true)
  rule         Json          @default("{\"endTime\": \"23:00\", \"startTime\": \"05:00\", \"maxMissedDays\": 3}")
  settings     Json          @default("{\"habitType\": \"generic\", \"checkinContentVisibility\": \"public\"}")
  startDate    DateTime      @default(now())
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  completedAt  DateTime?
  roomState    Json          @default("{\"items\": [], \"scene\": \"default_room\", \"theme\": \"classic\", \"locked\": true, \"progress\": 0}")
  levelMembers LevelMember[]
  owner        Player        @relation("LevelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  quiz         Quiz?

  @@map("levels")
}

model LevelMember {
  id           String        @id @default(uuid()) @db.Uuid
  playerId     String        @db.Uuid
  levelId      String        @db.Uuid
  role         Role          @default(PLAYER)
  status       MemberStatus  @default(ACTIVE)
  missedDays   Int           @default(0)
  joinedAt     DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  checkIns     CheckIn[]
  level        Level         @relation(fields: [levelId], references: [id], onDelete: Cascade)
  player       Player        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[]

  @@unique([playerId, levelId])
  @@map("level_members")
}

model CheckIn {
  id            String      @id @default(uuid()) @db.Uuid
  levelMemberId String      @db.Uuid
  type          CheckInType @default(TEXT)
  content       String?
  imagePixelUrl String?
  metadata      Json?       @default("{}")
  createdAt     DateTime    @default(now())
  levelMember   LevelMember @relation(fields: [levelMemberId], references: [id], onDelete: Cascade)

  @@map("check_ins")
}

model KeepNote {
  id        String   @id @default(uuid()) @db.Uuid
  playerId  String   @db.Uuid
  content   String
  tags      String[] @default([])
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("keep_notes")
}

model Achievement {
  id                 String              @id @default(uuid()) @db.Uuid
  name               String
  description        String
  iconName           String
  triggerRule        Json                @default("{\"type\": \"manual\"}")
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  playerAchievements PlayerAchievement[]

  @@map("achievements")
}

model PlayerAchievement {
  id            String      @id @default(uuid()) @db.Uuid
  playerId      String      @db.Uuid
  achievementId String      @db.Uuid
  levelId       String?     @db.Uuid
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  player        Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, achievementId])
  @@map("player_achievements")
}

model Quiz {
  id          String         @id @default(uuid()) @db.Uuid
  levelId     String         @unique @db.Uuid
  title       String
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  attempts    QuizAttempt[]
  questions   QuizQuestion[]
  level       Level          @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model QuizQuestion {
  id            String @id @default(uuid()) @db.Uuid
  quizId        String @db.Uuid
  questionText  String
  options       Json   @default("[]")
  correctAnswer String
  order         Int    @default(0)
  quiz          Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model QuizAttempt {
  id            String      @id @default(uuid()) @db.Uuid
  levelMemberId String      @db.Uuid
  quizId        String      @db.Uuid
  score         Int
  answers       Json        @default("{}")
  completedAt   DateTime    @default(now())
  levelMember   LevelMember @relation(fields: [levelMemberId], references: [id], onDelete: Cascade)
  quiz          Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Friendship {
  id          String           @id @default(uuid()) @db.Uuid
  requesterId String           @db.Uuid
  addresseeId String           @db.Uuid
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  recipientId String   @db.Uuid
  type        String
  content     Json     @default("{}")
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

enum Role {
  CREATOR
  PLAYER
  AUDIENCE
}

enum MemberStatus {
  ACTIVE
  ELIMINATED
  GHOST
}

enum CheckInType {
  TEXT
  IMAGE
  CHECKMARK
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
